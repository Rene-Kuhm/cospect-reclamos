---
import { supabase } from '../../lib/supabase';
import { formatDate } from '../../utils/date';

const { data: pendingUsers } = await supabase
  .from('profiles')
  .select('id, full_name, role, created_at, email:users(email)')
  .eq('approved', false)
  .order('created_at', { ascending: false });

const approveUser = async (userId: string) => {
  const { error } = await supabase
    .from('profiles')
    .update({ approved: true })
    .eq('id', userId);

  return !error;
};
---

<div class="space-y-6">
  <div class="flex items-center justify-between">
    <h2 class="text-xl font-semibold text-gray-900 dark:text-white">
      Usuarios Pendientes de Aprobación
    </h2>
  </div>

  {pendingUsers && pendingUsers.length > 0 ? (
    <div class="overflow-x-auto">
      <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
        <thead class="bg-gray-50 dark:bg-gray-800">
          <tr>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
              Nombre
            </th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
              Email
            </th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
              Rol
            </th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
              Fecha de Registro
            </th>
            <th class="px-6 py-3 text-right text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
              Acciones
            </th>
          </tr>
        </thead>
        <tbody class="bg-white dark:bg-gray-900 divide-y divide-gray-200 dark:divide-gray-700">
          {pendingUsers.map((user) => (
            <tr>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white">
                {user.full_name}
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white">
                {user.email?.email}
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm">
                <span class={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${
                  user.role === 'admin' 
                    ? 'bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200'
                    : 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200'
                }`}>
                  {user.role === 'admin' ? 'Administrador' : 'Técnico'}
                </span>
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white">
                {formatDate(new Date(user.created_at))}
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                <button
                  data-user-id={user.id}
                  class="approve-button text-blue-600 hover:text-blue-900 dark:text-blue-400 dark:hover:text-blue-300 font-medium"
                >
                  Aprobar
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  ) : (
    <p class="text-gray-500 dark:text-gray-400 text-center py-8">
      No hay usuarios pendientes de aprobación
    </p>
  )}
</div>

<script>
  function setupApprovalButtons() {
    const buttons = document.querySelectorAll('.approve-button');
    buttons.forEach(button => {
      button.addEventListener('click', async (e) => {
        const userId = (e.currentTarget as HTMLButtonElement).dataset.userId;
        if (!userId) return;

        try {
          const response = await fetch('/api/approve-user', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ userId }),
          });

          if (response.ok) {
            // Remove the row from the table
            const row = (e.currentTarget as HTMLButtonElement).closest('tr');
            row?.remove();

            // If no more rows, show the empty message
            const tbody = document.querySelector('tbody');
            if (tbody && !tbody.hasChildNodes()) {
              const table = tbody.closest('table');
              if (table) {
                table.insertAdjacentHTML(
                  'afterend',
                  '<p class="text-gray-500 dark:text-gray-400 text-center py-8">No hay usuarios pendientes de aprobación</p>'
                );
                table.remove();
              }
            }
          } else {
            throw new Error('Error al aprobar usuario');
          }
        } catch (error) {
          console.error('Error:', error);
          alert('Error al aprobar usuario');
        }
      });
    });
  }

  // Setup on initial load
  setupApprovalButtons();

  // Setup when content changes (for future dynamic updates)
  document.addEventListener('astro:after-swap', setupApprovalButtons);
</script>